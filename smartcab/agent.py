import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5, gamma=0.0, decay_r=0.05):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.gamma = gamma # for this project, no future reward is considered so this is by default set to 0.0
        self.decay_r = decay_r # rate of decay for any decay functions
        self.decay_c = epsilon # setup a constant to be used for linear decay function
        self.no_trials = 0 # start with 0 no of trials.  This will be incremented by 1 in reset function
        
    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        
        self.no_trials += 1
            
        if testing==True:
            self.epsilon=0
            self.alpha=0
        else:
            # using decay function from note for initial Q-Learning
            #self.epsilon=self.epsilon-self.decay_r # used in initial Q-Learning
            
            # using below decay function to optimize Q-Learning
            #self.epsilon = 1/(float(self.no_trials**2)) # tried this also but result is not good D and F respectively
            
            # using linear decay function I've learned from the web
            self.epsilon = self.decay_c - (self.decay_r*self.no_trials)
            
         
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        
        state = (waypoint,
                 inputs['light'],
                 inputs['oncoming'],
                 inputs['left']
                )
        
        
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        maxQ = None

        maxQ = max([self.Q[state][action] for action in self.valid_actions])
           
        return maxQ 
    


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        if self.learning == True: # learning is on
            if state not in self.Q: # state is not in current Q-Table
                self.Q[state] = dict() # create a dictionary for that state
                for action in self.valid_actions: # go through each valid action and set Q-Value to 0.0
                    self.Q[state][action] = 0.0
                   
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        
        import random

        if not (self.learning) or self.epsilon > random.random(): # self.learning == False and want to explore
            return random.choice(self.valid_actions)
        else: # learning == True and epsilon <= random.random(), choose highest Q-value for the current state (exploitation)
            maxQ = self.get_maxQ(self.state) # get the best Q
            # now choose action that matches maxQ.  In case of a tie, we will randomly pick one.
            action_list = list()
            for action in self.valid_actions:
                 if self.Q[state][action] == maxQ: 
                    action_list.append(action) # we have more than one action with same Q-value so add to action_list

            return random.choice(action_list) # if there is more than one actions with same Q-value, just pick one randomly
        
    

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        
        
        if self.learning:
       
            current_Q = self.Q[state][action] # current Q-value of current state
            next_State = self.build_state() # get next state
            self.createQ(next_State) # build the next Q entry for next state if doesnt exist
            
            #next_maxQ = self.get_maxQ(next_State) # we don't use gamma so this is comment out per feedback from reviewer
            
            # update current state/action with new Q-value based on value iteration update rule below
            # For this project, there is no future reward consideration so this one is commmented out
            #self.Q[state][action] = current_Q + self.alpha * (reward + self.gamma*next_maxQ - current_Q) - 
            
            self.Q[state][action] = current_Q + self.alpha * (reward - current_Q) # immediate reward only
            

        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    #agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.5, gamma=0.0, decay_r=0.05) #initial Q-Learning
    #agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.1) # using 1/t^2 decay function
    #agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.1, gamma=0.0, decay_r=0.01) # 100 trials
    #agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.1, gamma=0.0, decay_r=0.005) # 200 trials
    #agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.1, gamma=0.0, decay_r=0.0025) # 400 trials
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.2, gamma=0.0, decay_r=0.0025) # 400 trials
   
    
    ##############
    # Follow the driving agent
    # Flags: 
    #   enforce_deadline - set to True to enforce a deadline metri
    
    env.set_primary_agent(agent, enforce_deadline = True)
   
    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    
    #sim = Simulator(env, update_delay=0.01, log_metrics=True) # paramters used in initial Q-Learning
    sim = Simulator(env, update_delay=0.01, display=False, log_metrics=True, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    
    #sim.run(tolerance=0.05, n_test=10) # parameters used in initial Q-Learning
    #sim.run(tolerance=0.01, n_test=10)
    sim.run(tolerance=0.01, n_test=50)
    


if __name__ == '__main__':
    run()
